// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file
//

#ifndef CONFIGURATION_XML_HPP
#define CONFIGURATION_XML_HPP

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/tree/parsing.hxx>

#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/xml/dom/serialization-header.hxx>

namespace xml_schema
{
  // anyType and anySimpleType
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type<type> simple_type;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types
  //
  typedef long long integer;
  typedef integer non_positive_integer;
  typedef integer non_negative_integer;
  typedef integer positive_integer;
  typedef integer negative_integer;

  // Boolean
  //
  typedef bool boolean;

  // Floating-point types
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken> nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time
  //
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::day< char, simple_type > day;
  typedef ::xsd::cxx::tree::month< char, simple_type > month;
  typedef ::xsd::cxx::tree::month_day< char, simple_type > month_day;
  typedef ::xsd::cxx::tree::year< char, simple_type > year;
  typedef ::xsd::cxx::tree::year_month< char, simple_type > year_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information. Used in serialization functions
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;

  // Flags and properties
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // DOM user data key for back pointers to tree nodes
  //
#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA

  const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;

#endif

  // Exceptions
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;
}

// Forward declarations
//
namespace cxml
{
  class ConfigurationXML ;
  class keyboard ;
  class audio ;
  class video ;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace cxml
{
  class ConfigurationXML: public ::xml_schema::type
  {
    public:

    // language

    typedef ::xml_schema::string language_type;
    typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

    const language_type&
    language () const;

    language_type&
    language ();

    void
    language (const language_type& x);

    void
    language (::std::auto_ptr< language_type > p);

    // keyboard

    typedef ::cxml::keyboard keyboard_type;
    typedef ::xsd::cxx::tree::traits< keyboard_type, char > keyboard_traits;

    const keyboard_type&
    keyboard () const;

    keyboard_type&
    keyboard ();

    void
    keyboard (const keyboard_type& x);

    void
    keyboard (::std::auto_ptr< keyboard_type > p);

    // audio

    typedef ::cxml::audio audio_type;
    typedef ::xsd::cxx::tree::traits< audio_type, char > audio_traits;

    const audio_type&
    audio () const;

    audio_type&
    audio ();

    void
    audio (const audio_type& x);

    void
    audio (::std::auto_ptr< audio_type > p);

    // video

    typedef ::cxml::video video_type;
    typedef ::xsd::cxx::tree::traits< video_type, char > video_traits;

    const video_type&
    video () const;

    video_type&
    video ();

    void
    video (const video_type& x);

    void
    video (::std::auto_ptr< video_type > p);

    // Constructors
    //
    ConfigurationXML (const language_type&,
                      const keyboard_type&,
                      const audio_type&,
                      const video_type&);

    ConfigurationXML (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

    ConfigurationXML (const ConfigurationXML& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

    virtual ConfigurationXML*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation
    //
    protected:

    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:

    ::xsd::cxx::tree::one< language_type > language_;
    ::xsd::cxx::tree::one< keyboard_type > keyboard_;
    ::xsd::cxx::tree::one< audio_type > audio_;
    ::xsd::cxx::tree::one< video_type > video_;
  };

  class keyboard: public ::xml_schema::type
  {
    public:
    // movenorth
    //
    typedef ::xml_schema::int_ movenorth_type;
    typedef ::xsd::cxx::tree::traits< movenorth_type, char > movenorth_traits;

    const movenorth_type& movenorth () const;

    movenorth_type& movenorth ();

    void movenorth ( const movenorth_type& x );

    // movesouth
    //
    typedef ::xml_schema::int_ movesouth_type;
    typedef ::xsd::cxx::tree::traits< movesouth_type, char > movesouth_traits;

    const movesouth_type& movesouth () const;

    movesouth_type& movesouth ();

    void movesouth ( const movesouth_type& x );

    // moveeast
    //
    typedef ::xml_schema::int_ moveeast_type;
    typedef ::xsd::cxx::tree::traits< moveeast_type, char > moveeast_traits;

    const moveeast_type& moveeast () const;

    moveeast_type& moveeast ();

    void moveeast ( const moveeast_type& x );

    // movewest
    //
    typedef ::xml_schema::int_ movewest_type;
    typedef ::xsd::cxx::tree::traits< movewest_type, char > movewest_traits;

    const movewest_type& movewest () const;

    movewest_type& movewest ();

    void movewest ( const movewest_type& x );

    // take
    //
    typedef ::xml_schema::int_ take_type;
    typedef ::xsd::cxx::tree::traits< take_type, char > take_traits;

    const take_type&
    take () const;

    take_type&
    take ();

    void
    take (const take_type& x);

    // jump
    //
    typedef ::xml_schema::int_ jump_type;
    typedef ::xsd::cxx::tree::traits< jump_type, char > jump_traits;

    const jump_type&
    jump () const;

    jump_type&
    jump ();

    void
    jump (const jump_type& x);

    // doughnut
    //
    typedef ::xml_schema::int_ doughnut_type;
    typedef ::xsd::cxx::tree::traits< doughnut_type, char > doughnut_traits;

    const doughnut_type&
    doughnut () const;

    doughnut_type&
    doughnut ();

    void
    doughnut (const doughnut_type& x);

    // takeandjump
    //
    typedef ::xml_schema::int_ takeandjump_type;
    typedef ::xsd::cxx::tree::traits< takeandjump_type, char > takeandjump_traits;

    const takeandjump_type&
    takeandjump () const;

    takeandjump_type&
    takeandjump ();

    void
    takeandjump (const takeandjump_type& x);

    // swap
    //
    typedef ::xml_schema::int_ swap_type;
    typedef ::xsd::cxx::tree::traits< swap_type, char > swap_traits;

    const swap_type&
    swap () const;

    swap_type&
    swap ();

    void
    swap (const swap_type& x);

    // halt
    //
    typedef ::xml_schema::int_ halt_type;
    typedef ::xsd::cxx::tree::traits< halt_type, char > halt_traits;

    const halt_type&
    halt () const;

    halt_type&
    halt ();

    void
    halt (const halt_type& x);

    // Constructors
    //
    keyboard (const movenorth_type&,
              const movesouth_type&,
              const moveeast_type&,
              const movewest_type&,
              const take_type&,
              const jump_type&,
              const doughnut_type&,
              const takeandjump_type&,
              const swap_type&,
              const halt_type&);

    keyboard (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

    keyboard (const keyboard& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

    virtual keyboard*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:
    ::xsd::cxx::tree::one< movenorth_type > movenorth_;
    ::xsd::cxx::tree::one< movesouth_type > movesouth_;
    ::xsd::cxx::tree::one< moveeast_type > moveeast_;
    ::xsd::cxx::tree::one< movewest_type > movewest_;
    ::xsd::cxx::tree::one< take_type > take_;
    ::xsd::cxx::tree::one< jump_type > jump_;
    ::xsd::cxx::tree::one< doughnut_type > doughnut_;
    ::xsd::cxx::tree::one< takeandjump_type > takeandjump_;
    ::xsd::cxx::tree::one< swap_type > swap_;
    ::xsd::cxx::tree::one< halt_type > halt_;
  };

  class audio: public ::xml_schema::type
  {
    public:
    // fx
    //
    typedef ::xml_schema::int_ fx_type;
    typedef ::xsd::cxx::tree::traits< fx_type, char > fx_traits;

    const fx_type&
    fx () const;

    fx_type&
    fx ();

    void
    fx (const fx_type& x);

    // music
    //
    typedef ::xml_schema::int_ music_type;
    typedef ::xsd::cxx::tree::traits< music_type, char > music_traits;

    const music_type&
    music () const;

    music_type&
    music ();

    void
    music (const music_type& x);

    // Constructors
    //
    audio (const fx_type&,
            const music_type&);

    audio (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0);

    audio (const audio& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0);

    virtual audio*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:
    ::xsd::cxx::tree::one< fx_type > fx_;
    ::xsd::cxx::tree::one< music_type > music_;
  };

  class video: public ::xml_schema::type
  {
    public:

    // fullscreen

    typedef ::xml_schema::int_ fullscreen_type;
    typedef ::xsd::cxx::tree::traits< fullscreen_type, char > fullscreen_traits;

    const fullscreen_type&
    fullscreen () const;

    fullscreen_type&
    fullscreen ();

    void
    fullscreen (const fullscreen_type& x);

    // shadows

    typedef ::xml_schema::int_ shadows_type;
    typedef ::xsd::cxx::tree::traits< shadows_type, char > shadows_traits;

    const shadows_type&
    shadows () const;

    shadows_type&
    shadows ();

    void
    shadows (const shadows_type& x);

    // background

    typedef ::xml_schema::int_ background_type;
    typedef ::xsd::cxx::tree::traits< background_type, char > background_traits;

    const background_type&
    background () const;

    background_type&
    background ();

    void
    background (const background_type& x);

    // graphics

    typedef ::xml_schema::string graphics_type;
    typedef ::xsd::cxx::tree::traits< graphics_type, char > graphics_traits;

    const graphics_type&
    graphics () const;

    graphics_type&
    graphics ();

    void
    graphics (const graphics_type& x);

    void
    graphics (::std::auto_ptr< graphics_type > p);

    // Constructors
    //
    video ( const fullscreen_type&,
            const shadows_type&,
            const background_type&,
            const graphics_type& );

    video ( const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0 );

    video ( const video& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0 );

    virtual video*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:
    ::xsd::cxx::tree::one< fullscreen_type > fullscreen_;
    ::xsd::cxx::tree::one< shadows_type > shadows_;
    ::xsd::cxx::tree::one< background_type > background_;
    ::xsd::cxx::tree::one< graphics_type > graphics_;
  };
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>

# include <xercesc/dom/DOMLSInput.hpp>

namespace cxml
{
  // Parse a URI or a local file
  //

  ::std::auto_ptr< ::cxml::ConfigurationXML >
  preferences (  const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties () );

  // Parse std::istream
  //

  ::std::auto_ptr< ::cxml::ConfigurationXML >
  preferences (  ::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties () );

  ::std::auto_ptr< ::cxml::ConfigurationXML >
  preferences (  ::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties () );

  // Parse xercesc::DOMLSInput
  //

  ::std::auto_ptr< ::cxml::ConfigurationXML >
  preferences (  const ::xercesc::DOMLSInput& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties () );

  // Parse xercesc::DOMDocument
  //

  ::std::auto_ptr< ::cxml::ConfigurationXML >
  preferences (  const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties () );

  ::std::auto_ptr< ::cxml::ConfigurationXML >
  preferences (  ::xercesc::DOMDocument* d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties () );
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace cxml
{
  // Serialize to std::ostream
  //

  void
  preferences (  ::std::ostream& os,
                 const ::cxml::ConfigurationXML& x,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0 );

  // Serialize to xercesc::XMLFormatTarget
  //

  void
  preferences (  ::xercesc::XMLFormatTarget& ft,
                 const ::cxml::ConfigurationXML& x,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0 );

  // Serialize to an existing xercesc::DOMDocument
  //

  void
  preferences (  ::xercesc::DOMDocument& d,
                 const ::cxml::ConfigurationXML& x,
                 ::xml_schema::flags f = 0 );

  // Serialize to a new xercesc::DOMDocument
  //

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
  preferences (  const ::cxml::ConfigurationXML& x,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f = 0 );

  void
  operator<< ( ::xercesc::DOMElement&, const ConfigurationXML& );

  void
  operator<< ( ::xercesc::DOMElement&, const keyboard& );

  void
  operator<< ( ::xercesc::DOMElement&, const audio& );

  void
  operator<< (::xercesc::DOMElement&, const video&);
}

#include <xsd/cxx/post.hxx>

#endif
